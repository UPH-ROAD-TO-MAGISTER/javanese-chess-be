// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Backend Team",
            "email": "backend@yourcompany.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config/weights/default": {
            "get": {
                "description": "Returns the default heuristic weights based on research paper (Section 2.4)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Get default heuristic weights",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/config/weights/room": {
            "get": {
                "description": "Returns the heuristic weights configured for a specific room",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Get room heuristic weights",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room Code",
                        "name": "roomCode",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/play": {
            "post": {
                "description": "Initialize room (create if missing), add bots and apply provided heuristic weights in one request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Room"
                ],
                "summary": "Add bots to a room or create room and apply config",
                "parameters": [
                    {
                        "description": "Room info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.PlayRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.HeuristicWeights": {
            "type": "object",
            "properties": {
                "block_potential": {
                    "type": "integer"
                },
                "block_when_threat": {
                    "description": "Blocking weights",
                    "type": "integer"
                },
                "build_alignment_2": {
                    "description": "Build alignment specific weights",
                    "type": "integer"
                },
                "build_alignment_3": {
                    "type": "integer"
                },
                "keep_near_card": {
                    "type": "integer"
                },
                "legal_move": {
                    "description": "Legal move value",
                    "type": "integer"
                },
                "play_smallest_card": {
                    "description": "Smallest-card and proximity preferences",
                    "type": "integer"
                },
                "replace_pos_middle": {
                    "description": "Position modifiers for replacement",
                    "type": "integer"
                },
                "replace_pos_side": {
                    "type": "integer"
                },
                "replace_potential": {
                    "type": "integer"
                },
                "replace_values_potential": {
                    "description": "Replace values for potential threats (prioritize small cards: card1..9)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "replace_values_threat": {
                    "description": "Replace values when blocking an immediate threat (card 1..9 -\u003e indices 0..8)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "replace_when_threat": {
                    "description": "Replace weights (contextual)",
                    "type": "integer"
                },
                "w_block_path": {
                    "description": "W₄: Blocking enemy paths (cutting opponent lines)",
                    "type": "integer"
                },
                "w_build_alignment": {
                    "description": "W₅: Building own alignments (2 or 3 in a row)",
                    "type": "integer"
                },
                "w_card_cost": {
                    "description": "W₆: Card value management (resource efficiency)",
                    "type": "integer"
                },
                "w_replace_value": {
                    "description": "W₃: Overwriting opponent cards (strategic replacement)",
                    "type": "integer"
                },
                "w_threat": {
                    "description": "W₂: Blocking opponent's immediate threat (3-in-a-row)",
                    "type": "integer"
                },
                "w_win": {
                    "description": "W₁: Winning move detection (4-in-a-row)",
                    "type": "integer"
                }
            }
        },
        "http.PlayRequest": {
            "type": "object",
            "properties": {
                "number_bot": {
                    "type": "integer"
                },
                "number_player": {
                    "type": "integer"
                },
                "player_name": {
                    "type": "string"
                },
                "room_id": {
                    "type": "string"
                },
                "weights": {
                    "$ref": "#/definitions/config.HeuristicWeights"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Javanese Chess Bot API",
	Description:      "REST API for heuristic-based chess-like bot (Go + Gin)",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
